<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascripts on Happiness Development</title>
    <link>https://mj-seok.com/javascript/</link>
    <description>Recent content in Javascripts on Happiness Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Mar 2020 15:29:12 +0900</lastBuildDate>
    
	<atom:link href="https://mj-seok.com/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ECMAScript 6 - Arrow 함수</title>
      <link>https://mj-seok.com/javascript/es6-arrow/</link>
      <pubDate>Fri, 13 Mar 2020 15:29:12 +0900</pubDate>
      
      <guid>https://mj-seok.com/javascript/es6-arrow/</guid>
      <description>ECMAScript 6 - Arrow 함수  arrow의 사전적 의미는 &amp;ldquo;화살, 화살표(=&amp;gt;)&amp;ldquo;이며 의미보다 표기가 더 어울립니다. 영어 발음보다 화살표가 더 직관적이므로 이 책에서는 &amp;ldquo;화살표 함수&amp;quot;로 표기합니다.   (param) =&amp;gt; { 코드 };
param =&amp;gt; { 코드 };
() =&amp;gt; { 코드 };
(param1, param2, , , , paramN) =&amp;gt; { 코드 };
param =&amp;gt; ( { key: value });
(param1, param2, &amp;hellip;rest) =&amp;gt; { 코드 };
(param1, param2 = 123, , , paramN) =&amp;gt; { 코드 };</description>
    </item>
    
    <item>
      <title>ECMAScript 6 - var, let, const</title>
      <link>https://mj-seok.com/javascript/es6/</link>
      <pubDate>Fri, 13 Mar 2020 12:40:07 +0900</pubDate>
      
      <guid>https://mj-seok.com/javascript/es6/</guid>
      <description>ECMAScript 6 - var, let, const 1. var 키워드
2. let 키워드
3. 블록 스코프
4. let과 this 키워드
5. function
6. try-catch
7. switch-case
8. 호이스팅
9. for()
10. const
 자바스크립트 코드 실행되려면  코드 컴파일 실행할 자바스크립트 엔진이 필요 ECMA 262 스펙   ES6  객체지향 언어의 장점을 적극적으로 도입 효율적인 메모리 사용에 중점   빌트인 오브젝트  엔진이 사전에 오브젝트로 생성한 것 사전 처리를 하지 않고 바로 사용할 수 있는 것 Function, Object, Array, Number, String 등의 오브젝트   object  첫 문자가 영문 소문자이고 빌트인 오브젝트로 생성한 오브젝트를 의미 첫 문자가 대문자인 Object는 {key: value} 형태를 의미   인스턴스  new 연산자와 생성자 함수로 인스턴스를 생성합니다.</description>
    </item>
    
    <item>
      <title>ES6 - 적절한 꼬리 호출(Proper Tail Calls)</title>
      <link>https://mj-seok.com/javascript/ecma-ptc/</link>
      <pubDate>Wed, 08 Jan 2020 18:46:45 +0900</pubDate>
      
      <guid>https://mj-seok.com/javascript/ecma-ptc/</guid>
      <description>ECMAScript 6 - 적절한 꼬리 호출(Proper Tail Calls) https://webkit.org/blog/6240/ecmascript-6-proper-tail-calls-in-webkit/
적절한 꼬리 호출?(Proper Tail Calls)  Proper Tail Calls(PTC)는 ECMAScript 6 언어의 새로운 특징입니다. recursive 프로그래밍 패턴을 수월하게 하고자 추가됬다고 합니다. stack overflow exception 를 발생시키는 코드도 실행할 수 있게 한다고 합니다.  부연 설명  일반적으로 함수 호출할 때, 함수 호출과 관련된 데이터에 스택 공간을 할당합니다. 이 데이터에는 반환 주소, 이전 스택 포인터, 함수에 대한 전달인자, 로컬 값에 대한 공간(스택 프레임)등 있습니다.</description>
    </item>
    
    <item>
      <title>Javascript와 ECMAScript - 알아보기</title>
      <link>https://mj-seok.com/javascript/ecma-javascript/</link>
      <pubDate>Mon, 06 Jan 2020 23:50:45 +0900</pubDate>
      
      <guid>https://mj-seok.com/javascript/ecma-javascript/</guid>
      <description>Javascript와 ECMAScript - 알아보기 ECMAScript 와 JavaScript JavaScript https://developer.mozilla.org/ko/docs/Learn/JavaScript/First_steps/What_is_JavaScript
 복잡한 무언가(주기적으로 내용이 갱신되는 기능이나 능동적인 지도, 변화하는 2D/3D 그래픽, 동영상 등)를 웹페이지에 적용할 수 있게 하는 스크립트 혹은 프로그래밍 언어입니다.  기본 작성 형태 // HTML 요소 중 p태그를 선택const para = document.querySelector(&amp;#39;p&amp;#39;);para.addEventListener(&amp;#39;click&amp;#39;, updateName);function updateName() {//&amp;#39;Enter a new name&amp;#39;과 입력란 출력하여 입력받은 값을 name에 저장 let name = prompt(&amp;#39;Enter a new name&amp;#39;);// para(p태그)에 새로운 문자열 저장 para.</description>
    </item>
    
    <item>
      <title>타입스크립트 기초 - TypeScript Basic</title>
      <link>https://mj-seok.com/javascript/typescript/</link>
      <pubDate>Wed, 18 Dec 2019 21:34:00 +0900</pubDate>
      
      <guid>https://mj-seok.com/javascript/typescript/</guid>
      <description>타입스크립트 기초 - TypeScript Basic [Reference] : https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html
Install npm install -g typescript node.js가 설치되어 있는 환경에서 typescript를 npm 패키지 매니저로 전역(-g) 설치합니다.  Compile tsc helloworld.ts 컴파일 명령어는 tsc 입니다.  greeter.ts function greeter(person) {return &amp;#34;Hello, &amp;#34; + person;}let user = &amp;#34;Jane User&amp;#34;;// document.body.textContext = greeter(user);console.log(greeter(user)); 가장 기본적인 방법으로 함수에 인자 넣어 콘솔에 로그를 찍습니다.  터미널 환경에서 &amp;ldquo;tsc greeter.ts&amp;rdquo;, &amp;ldquo;node greeter.</description>
    </item>
    
  </channel>
</rss>